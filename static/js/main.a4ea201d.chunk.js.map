{"version":3,"sources":["percentagelogo.png","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Firstscreen","className","src","logo","alt","makeMeAButton","text","onclick","width","height","top","left","style","position","margin","onClick","target","rel","id","xmlns","Firstbutton","props","changeState","setState","show","state","this","React","Component","GradeCalculator","append","scrollBy","behavior","prevState","numInputs","setAverageGrade","gradeSum","index","document","getElementById","value","parseFloat","total","averageGrade","content","push","count","borderColor","borderLeft","borderRight","pointerEvents","type","pattern","maxLength","readOnly","ExamCalculator","updateTotal","examID","examWeightID","cwWeightID","otherWeightID","cwID","otherID","examWeightVal","examVal","cwVal","otherVal","totalVal","alert","onChange","borderTop","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a4ea201d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/percentagelogo.60ec67d5.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport logo from './percentagelogo.png';\n\n//first screen function\nconst Firstscreen = function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />  \n      </header>\n      <Firstbutton/>\n\n</div>\n  );\n}\n//a way to generate myself the same button by passing parameters \nfunction makeMeAButton(text,onclick,width,height,top,left) {\n  return (\n    <div className=\"svg-wrapper\" \n    style={{width:{width},height:{height}}}\n    style={{position:'relative',margin:'25px'}}\n    \n    >\n    <button onClick={onclick}\n        style={{width:{width},height:{height}}}\n        className=\"text\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        id=\"calculateGrades\"  \n      >{text}</button>\n<svg height={height} width={width} xmlns=\"http://www.w3.org/2000/svg\">\n  <rect className=\"shape\" height={height} width={width} />    \n</svg>\n</div>\n);\n}\n// this is the first screen content (technically just a button) but it returns the main content (GradeCalculator)\nclass Firstbutton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: \"true\"\n    };\n  }\n  changeState = () => {\n    this.setState({show: \"false\"});\n  }\n  render() {\n    if(this.state.show==\"true\"){\n    return (\n    <div className=\"svg-wrapper\">\n    <button onClick={this.changeState}\n        className=\"text\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        id=\"calculateGrades\"\n      >Calculate Grades</button>\n<svg height=\"60\" width=\"320\" xmlns=\"http://www.w3.org/2000/svg\">\n  <rect className=\"shape\" height=\"60\" width=\"320\" />    \n</svg>\n</div>\n);\n    }else{\n      return <GradeCalculator/>;\n    }\n  }\n}\n\n//main content class has everything except the generated content (everything that should persist throughout the session is here)\nclass GradeCalculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: \"true\",\n      numInputs:1, //we need to know how many generated fields there are\n      averageGrade:0 //the running total should stay and update continuously so we keep it as state value\n    };\n  }\n  changeState = () => {\n    this.setState({show: \"false\"});\n  }\n  append = () => {\n    window.scrollBy({  //supposed to scroll down the screen on generated component (doesnt work on all browsers)\n      top: '500', // could be negative value\n      left: 0, \n      behavior: 'smooth' \n    });\n    this.setState(prevState => {\n      return {numInputs: prevState.numInputs + 1}\n   });\n  }\n\n  setAverageGrade = () =>{\n    //update the average grade\n    var gradeSum=0;\n    for (let index = 1; index < this.state.numInputs+1; index++) { //loop through the generated fields and get the \"total\" values\n      var id=\"total\"+index;\n      if(document.getElementById(id).value==\"\"){\n        document.getElementById(id).value=0;\n      }\n      gradeSum +=parseFloat(document.getElementById(id).value); //running total of the values\n     }\n     var total=gradeSum/this.state.numInputs; //average of the values\n     this.setState({averageGrade:total})\n  \n  }\n  \n  render() {\n    const content = [];\n    if(this.state.show==\"true\"){\n      for (let index = 1; index < this.state.numInputs+1; index++) {\n       content.push(<ExamCalculator count={index}/>); //create a content variable with the number of exam calculators displayed\n        \n      }\n      \n    return (\n    <div className=\"inputField\">\n      {content} \n    {makeMeAButton(\"Calculate more\",this.append,'160','50','100%','100%')}\n    <div><span className=\"calculatingUnit\">\n    <input className=\"inputbar\" style={{borderColor:'#9966ff',borderLeft:'transparent',borderRight:'transparent',pointerEvents:'none'}} type=\"text\" pattern=\"[0-9]{1,3}\" maxLength=\"3\" id=\"averageTotal\" value ={this.state.averageGrade}readOnly/>\n    <p className=\"percentages\">⇑<br/> Course Average Grade %</p>\n    {makeMeAButton(\"Update\",this.setAverageGrade,'75','50','100%','100%')}\n    </span>\n    </div>\n</div>\n\n\n);\n    }else{\n      return null;\n    }\n  }\n}\n\n\nclass ExamCalculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: \"true\",\n    };\n  }\n  changeState = () => {\n    this.setState({show: \"false\"});\n  }\n  render() {\n    \n    if(this.state.show==\"true\"){\n    return (\n      <div>\n        <div><span className=\"calculatingUnit\">\n    <input onChange={this.updateTotal} className=\"inputbar\" style={{borderColor:'#33ff99',borderLeft:'transparent',borderRight:'transparent'}} type=\"text\" pattern=\"[0-9]{1,3}\" maxLength=\"3\" id={\"examWeight\"+this.props.count}/>\n    <p className=\"percentages\">⇑<br/> Exam Weight %</p>\n    </span>\n    <span className=\"calculatingUnit\">\n    <input onChange={this.updateTotal} className=\"inputbar\" style={{borderColor:'#33ff99',borderLeft:'transparent',borderRight:'transparent'}} type=\"text\" pattern=\"[0-9]{1,3}\" maxLength=\"3\" id={\"cwWeight\"+this.props.count}/>\n    <p className=\"percentages\">⇑<br/> Coursework Weight %</p>\n    </span>\n    <span className=\"calculatingUnit\">\n    <input onChange={this.updateTotal} className=\"inputbar\" style={{borderColor:'#33ff99',borderLeft:'transparent',borderRight:'transparent'}} type=\"text\" pattern=\"[0-9]{1,3}\" maxLength=\"3\" id={\"otherWeight\"+this.props.count}/>\n    <p className=\"percentages\">⇑<br/> Other Sources Weight %</p>\n    </span></div>\n      <span className=\"calculatingUnit\">\n    <input onChange={this.updateTotal} className=\"inputbar\" type=\"text\" pattern=\"[0-9]{1,3}\" maxLength=\"3\" id={\"exam\"+this.props.count}/>\n    <p className=\"percentages\">⇑<br/> Exam %</p>\n    </span>\n    <span className=\"calculatingUnit\">\n    <input onChange={this.updateTotal} className=\"inputbar\" type=\"text\" pattern=\"[0-9]{1,3}\" maxLength=\"3\" id={\"cw\"+this.props.count}/>\n    <p className=\"percentages\">⇑<br/> Coursework %</p>\n    </span><span className=\"calculatingUnit\">\n    <input onChange={this.updateTotal} className=\"inputbar\" type=\"text\" pattern=\"[0-9]{1,3}\" maxLength=\"3\" id={\"other\"+this.props.count}/>\n    <p className=\"percentages\">⇑<br/> Other Sources %</p>\n    </span><span className=\"calculatingUnit\">\n    <input className=\"inputbar\" type=\"text\" pattern=\"[0-9]{1,3}\" maxLength=\"3\" id={\"total\"+this.props.count} style={{pointerEvents:'none',borderColor:'#ffb366',borderLeft:'transparent',borderRight:'transparent',borderTop:'transparent'}} value={this.state.total} readOnly/>\n    <p className=\"percentages\">⇑<br/> Module Total %</p>\n    </span>\n    </div>\n);\n    }else{\n      return null;\n    }\n  }\n  updateTotal = () => {\n    //targeting input\n    var examID=\"exam\"+this.props.count;\n    var examWeightID=\"examWeight\"+this.props.count;\n    var cwWeightID=\"cwWeight\"+this.props.count;\n    var otherWeightID=\"otherWeight\"+this.props.count;\n    var cwID=\"cw\"+this.props.count;\n    var otherID=\"other\"+this.props.count;\n\n    //getting values\n    var examWeightVal=document.getElementById(examWeightID).value;\n    var examVal=document.getElementById(examID).value;\n    var cwVal=document.getElementById(cwID).value;\n    var otherVal=document.getElementById(otherID).value;\n    var cwWeightVal=document.getElementById(cwWeightID).value;\n    var otherWeightVal=document.getElementById(otherWeightID).value;    \n  \n  //updating total\n    var totalVal=examVal*0.01*examWeightVal+cwVal*0.01*cwWeightVal+otherVal*0.01*otherWeightVal;\n    if (totalVal>100) {\n      window.alert('Please check if values entered are not exceeding a sum of 100')\n    }else{\n    this.setState({total: totalVal});\n    }\n}\n\n}\n\n\n\n\n//render the whole thing\n\nReactDOM.render(\n  <Firstscreen/>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}